from fastapi import APIRouter, Depends

from app.db import AsyncSession, get_session
from app.schemas.selections.selections_response import (
    SelectionsResponse,
    SelectionsResponseArea,
    SelectionsResponseCommutingTime,
    SelectionsResponseEmploymentManagement,
    SelectionsResponseFeature,
    SelectionsResponseFramework,
    SelectionsResponseJob,
    SelectionsResponseOccupation,
    SelectionsResponseOccupationalAbility,
    SelectionsResponseProgrammingLanguage,
    SelectionsResponseRecruitment,
    SelectionsResponseSelection,
    SelectionsResponseSkill,
)

router = APIRouter()


@router.get("", response_model=SelectionsResponse, summary="選考管理一覧（学生）")
async def get_selections(
    job_id: str | None = None,
    steps: str | None = None,
    page: int | None = None,
    session: AsyncSession = Depends(get_session),
) -> SelectionsResponse:
    job = SelectionsResponseJob(
        job_title="Test",
        skill_level=1,
        job_image="http://www.google.com",
        salary_from=0,
        min_salary_amount=0,
        max_salary_amount=3000000,
        area=[SelectionsResponseArea(area_id=1, area_name="Tokai")],
        features=[SelectionsResponseFeature(features_id=1, features_name="Feature")],
        programming_languages=[SelectionsResponseProgrammingLanguage(programming_languages_id=1, programming_languages_name="C++")],
        frameworks=[SelectionsResponseFramework(frameworks_id=1, frameworks_name="Laravel")],
        skills=[SelectionsResponseSkill(skills_id=1, skills_name="Skill")],
        update_at="2023-10-19T00:00:00Z",
        publication_start_date="2023-10-19T00:00:00Z",
        publication_end_date="2023-10-19T00:00:00Z",
        occupation=[SelectionsResponseOccupation(m_occupation_id=1, commuting_time_to="commuting time to")],
        job_description="Job description",
        target_people="You are wanted",
        work_location="Tokyo",
        number_of_people_hired=1000,
        initiatives_to_prevent_passive_smoking=0,
        employment_status=1,
        contract_period="No limit",
        trial_period=0,
        salary_supplement="No additional information",
        salary_increment="Nothing",
        bonus="Nothing",
        commuting_time=[SelectionsResponseCommutingTime(commuting_time_from="2023-10-19T00:00:00Z", commuting_time_to="2023-10-19T00:00:00Z")],
        commuting_time_supplement="Nothing",
        overtime_work=True,
        overtime_work_free_input="Nothing",
        holidays_or_vacation="Nothing",
        welfare="Nothing",
        training_system="Nothing",
        recruitment_flows=["Document Review"],
        selection_method="ABC",
        submitted_document="Yes",
        recruitment=[SelectionsResponseRecruitment(recruitment_status=1, recruitment_status_free_input=None)],
        occupational_ability=[SelectionsResponseOccupationalAbility(occupational_ability_status=1, occupational_ability_status_free_input="")],
        employment_management=[SelectionsResponseEmploymentManagement(employment_management_status=1, employment_management_status_free_input="")],
        contact_information="abc@abc.com",
        original_content1_text="AAAAAAAAA",
        original_content1_title="BBBBBBBBBBBBB",
        original_content2_text="CCCCCCCCCC",
        original_content2_title="DDDDDDDDDDDD",
        company_name="ABC Inc.",
        formal_name="ABC Inc.",
        logo_image_uri="http://www.google.com",
        image_uri="http://www.google.com",
        corporate_website_uri="http://www.google.com",
        contact_email_address="abc@abc.com",
        address="Japan",
        number_of_employee=100000,
        average_age=30,
        establishment_date=1996,
        capital_stock=10000000000,
        major_shareholder="I",
        sales=900000000,
        recruitment_record="Yes",
        description="Yes",
        business_detail="Nothing",
        philosophy="Nothing",
        chief_executive_officer="Joe",
    )

    selection = SelectionsResponseSelection(
        message_timeline_id="uuid-happiness",
        job=job,
        selection_method="自己応募",
        selection_step=10,
        start_date="2023-10-19T00:00:00Z",
        end_date="2023-10-19T00:00:00Z",
        memo="What is happiness?",
        update_date="2023-10-19T00:00:00Z",
        entry_date="2023-10-19T00:00:00Z",
        last_message_date="2023-10-19T00:00:00Z",
        has_added_in_favorites=True,
    )

    response = SelectionsResponse(total_page=2, current_page=0, selections=[selection])
    return response
